name: CI/CD - Build Docker & Deploy to EC2

on:
  push:
    branches:
      - master

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/kiencicd

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-tag.outputs.image_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # - name: Install dependencies
      #   run: npm ci

      # - name: Run lint and tests
      #   run: npm run ci

      - name: Set image tag
        id: set-tag
        run: |
          echo "image_tag=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./src
          file: ./src/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.image_tag }}
            ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Wait a bit for registry
        run: sleep 5

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          passphrase: ${{ secrets.EC2_SSH_PASSPHRASE }}
          port: 22
          # script to run remotely on EC2
          script: |
            set -e
            cd ${{ secrets.EC2_REMOTE_APP_DIR }}
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            # pull new image
            IMAGE=${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.image_tag }}
            echo "Pulling image $IMAGE"
            docker pull $IMAGE
            # update docker-compose.yml to use new tag (simple sed)
            # If docker-compose uses placeholder IMAGE_TAG, replace it
            if grep -q "IMAGE_TAG" docker-compose.yml; then
              sed -i "s/\${IMAGE_TAG}/${{ needs.build-and-push.outputs.image_tag }}/g" docker-compose.yml
            fi
            # bring up (recreate containers)
            docker-compose -f docker-compose.yml pull || true
            docker-compose -f docker-compose.yml up -d
            # optional: prune dangling images
            docker image prune -f
            # healthcheck: wait for /healthz
            for i in $(seq 1 12); do
              if curl -sSf http://localhost:3000/healthz >/dev/null; then
                echo "health check passed"
                exit 0
              fi
              echo "waiting for app... ($i)"
              sleep 5
            done
            echo "Health check failed" >&2
            exit 1
